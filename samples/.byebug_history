q
c
q
document.bibliographer.citations
Regexp.last_match.captures.inspect
Regexp.last_match.captures
line =~ Index::REGEXP
n; line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
n
line
q
c
q
qù
@keys
formatter.items
formatter
q
n
      @keys = @attributes.select { |hash_key, _| hash_key.is_a? Integer }.values
q
@attributes.select { |hash_key, _| hash_key.is_a? Integer }.values
@attributes.select { |hash_key, _| hash_key.is_a? Integer }
q
Citation::REGEXP
q
document.bibliographer.citations << citation
citation
document.bibliographer.citations
continue
@attributes.select { |key, _| key.is_a? Integer }.values
@attributes.select { |key, _| key.is_a? Integer }
@attributes.select { |key, _| key.is_a? Integer? }
"123".number?
"123".number
@attributes.select { |key, _| key.to_s.integer? }
"what".to_i
@attributes.select { |key, _| key.integer? }
123.integer?
@attributes.select { |key, _| key.number? }
@attributes.keys
@attributes
@attributes.class
@attributes
@åttributes
attributes
target
macro
target
c
q
target
c
target
macro
attributes
@attributes
q
File.ext
q
n
q
self.concat self.load(filename)
self = self.load(filename)
self.append self.load(filename)
self
self.load(filename)
filename
q
Database.new(document_attributes['bibliography-database'])
q
Database.new(document_attributes['bibliography-database'])
q
document.bibliographer.citations
q
c = Citation.new *Regexp.last_match.captures
c = Citation.new Regexp.last_match.captures
Citation
q
new_lines.join("\n\n").lines.map(&:strip)
new_lines.join("\n\n").lines.map(&.strip)
new_lines.join("\n\n").lines
new_lines.join("\n\n")
new_lines
lines
q
document.bibliographer.formatter.render(:bibliography, id: target)
target
q
target
q
BibTeX.open(document_attributes['bibliography-database']).to_citeproc
BibTeX.open(document_attributes['bibliography-database'])
document.bibliographer.databases.first
document.bibliographer.databases
c
q
doc_attributes
n
q
doc_attributes
n
doc_attributes
n
q
Hash[ [keys, document_.values_at(*keys)].transpose]
doc_attributes.slice(:bibliography_style)
doc_attributes
n
q
document.content
document.parse
document.source
document.content
document.lines
boh.attributes.keys.sort
boh.class
boh
document.attributes.keys.sort
n
q
document.attributes.keys.sort
n
q
document.attributes.keys.sort
att
n
q
reader.read_lines
reader
document.attributes.keys.sort
n
c
n
document.attributes.keys.sort
q
qù
document
reader.read_lines
reader.lines
reader
document.attributes.keys.sort
n
c
n
document.attributes.keys.sort
q
document.attributes.keys.sort
document.sttributes
r.attributes.keys.sort
r.attributes
r.class
r = ::Asciidoctor::Parser.parse reader, document, header_only: true
::Asciidoctor::Parser.parse reader, document, header_only: true
::AsciiDoctor::Parser.parse reader, document, header_only: true
::Parser.parse reader, document, header_only: true
        Parser.parse reader, document, header_only: true
document.parse.attributes.keys.sort
document.parse.attributes
document.parse
document.has_header?
document.docinfo
document.extensions?
document.attributes.keys.sort
document.attributes.keys
document.attributes.sort
document.attributes
document
q
document.bibliographer.occurrences.map { |h| h[:target] }.uniq
document.bibliographer.occurrences.map { |h| h[:target] }
document.bibliographer.occurrences.map { |h| h['target'] }
document.bibliographer.occurrences.slice(:target)
document.bibliographer.occurrences.map(&:target)
document.bibliographer.occurrences
c
q
document.bibliographer.occurrences
q
[nil,nil].join 'b'
attributes['index']
attributes['index']'
attributes
c
q
attributes
target
q
attributes[1]
attributes[:'1']
attributes
attributes[:1]
attributes[:!]
q
attributes[:index]
attributes
q
attributes
attributes.parse
q
attributes.parse
attributes
q
linez.flatten
linez
c
q
document.bibliographer.occurrences.each do |occ| puts occ[q end
document.bibliographer.occurrences.each do |occ| puts occ end
document.bibliographer.occurrences
q
linez.q
linez
q
linez
q
c
q
line =~ /^#{'bibliography'}::(\S+?)*\[(|.*?[^\\])\]$/
line =~ /^#{'bibliography'}::(\S+?)\[(|.*?[^\\])\]$/
line =~ /bibliography::(\S+?)\[(|.*?[^\\])\]/
line =~ /bibliography::(\S+)?\[(|.*?[^\\])\]/
line =~ /bibliography::(\S+?)\[(|.*?[^\\])\]/
line =~ /bibliography::(\S+?)*\[(|.*?[^\\])\]/
