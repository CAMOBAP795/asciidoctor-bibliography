c
q
puts processed_lines
q
puts processed_lines
processed_lines
q
puts processed_lines.lines.map(&:chomp)
processed_lines.lines.map(&:chomp)
processed_lines.lines
processed_lines
q
Helpers.html_to_asciidoc form
form
q
document.bibliographer.options
q
Hash[document_attributes]
ENV
document_attributes
document_attributes.to_hash
document_attributes.to_h
document_attributes
q
cites.first.key
cites.first
cites
q
self.macro
self
q
output
q
@closing_bracket
q
bibpunct.scan(/{.*?}/)
bibpunct.scan(/{*.?}/)
puts bibpunct
          bibpunct = '{[}{\\]}{,}{n}{,}{,}'
bibpunct.length
          bibpunct = '{[}{]}{,}{n}{,}{,}'
bibpunct.length
          bibpunct = '{[}{\\]}{,}{n}{,}{,}'
bibpunct.scan(/{*.?}/)
          bibpunct = '{[}{\\]}{,}{n}{,}{,}'
'\'
          bibpunct = '{[}{\]}{,}{n}{,}{,}'
bibpunct.scan(/{*.?}/)
          bibpunct = '{[}{\\]}{,}{n}{,}{,}'
bibpunct.scan(/{*.?}/)
          bibpunct = '{[}{\]}{,}{n}{,}{,}'
bibpunct.scan(/{*.?}/)
bibpunct.scan(/{*.?}/).map { |s| s[1..-2] }
@closing_bracket
q
@closing_bracket
@opening_bracket
bracket "wot asd"
bracket "wot"
bracket(cetera)
label
citation.xref(cite.key, label)
output
q
y
rend
q
rend
q
rend
q
rend
q
rend
q
document.bibliographer.citations.last.cites.last.occurrence_index
document.bibliographer.citations.last.cites.last
document.bibliographer.citations.last.cites
document.bibliographer.citations.last
document.bibliographer.citations
document.bibliographer
q
citations.first.cites.first
citations.first.cites.first.target = "FOO"
citations.first.cites.first.target
citations.first.cites.first
citations.first.cites
citations.first
citations
q
document.bibliographer.citations.first.uuid
document.bibliographer.citations.first
document.bibliographer.citations
reader.lines.join("\n").lines.map(&:chomp)
reader.lines.join("\n").lines
reader.lines.join("\n")
reader.lines
reader
reader.lines
reader
q
reader.processed_lines
reader.lines
reader
processed_lines.join("\n").lines
processed_lines.join('\n').lines
processed_lines.join('\n')
processed_lines.join('"\n')
processed_lines.join
q
processed_lines
q
bibliographer.cited_keys.index(cite.key)q
bibliographer.cited_keys.index(cite.key)
bibliographer.cited_keys
bibliographer
q
document
cite
q
cite.named_attributes || {}
cite.named_attributes
extra(cite)
c
cetera
c
cetera
c
cetera
n
c
[year(cite)].concat(extra(cite)).join(@years_separator + ' ')
[year(cite)].concat(extra(cite))
q
extra
extr
q
cite.named_attributes['page']
cite.named_attributes
cite
q
y
cq
c
q
ct.key
ct
q
ct
n
ct
q
ct[:attributes][:named]['pagea']
ct[:attributes][:named]['page']
ct[:attributes][:named]['page]
ct[:attributes][:named]
ct[:named]
ct[:named]['page']
ct
q
ct[:key]
ct.key
ct
cite
ct
q
document.bibliographer.citations
q
TeXFormatter::DEFAULTS
TeXFormatter
q
@opening_bracket
bibpunct
q
Citation::DEFAULTS[cite.macro][:type]
q
Citation::DEFAULTS['citet'][:type]
Citation::DEFAULTS['citet'][:tyep]
Citation::DEFAULTS['citet']
Citation::DEFAULTS[cite.macro]
Citation::DEFAULTS[cite.macro][:type]
q
continue
Citation::DEFAULTS['citet']
Citation::DEFAULTS[:cite]
Citation::DEFAULTS['cite']
Citation::DEFAULTS
Citation
cite.macro
cite
q
c
q
[].empty?
[].blank?
[].any?
@database.find{ |h| h['id'] == ct[:key] }['issued']['date-parts'].first.first
@database.find{ |h| h['id'] == ct[:key] }['issued']['date-parts'].first
@database.find{ |h| h['id'] == ct[:key] }['issued']['date-parts']
@database.find{ |h| h['id'] == ct[:key] }['issued']
@database.find{ |h| h['id'] == ct[:key] }
ct
q
continue
c
q
cite
q
Helpers.to_sentence(authors_family_names)
n
Helpers.to_sentence(authors_family_names)
q
Helpers.to_sentence(authors_family_names)
n
c
ci.key
ci
c
cite.cites
cite
c
@database.find{ |h| h['id'] == 'asd' }
@database.find{ |h| h['id'] == c.key }
@database.find{ |h| h['id'] == c.key }['author']
q
cite.cites.first[:key]
cite.cites.first['key']
cite.cites
cite.cites.key
cite
@database.find { |h| h['id'] == 'Anderson04' }['author'].map { |h| h['family'] }.compact
@database.find { |h| h['id'] == 'Anderson04' }['author'].map { |h| h['family'] }
@database.find { |h| h['id'] == 'Anderson04' }['author']
@database.find { |h| h['id'] == 'Anderson04' }
self.find { |h| h['id'] == 'Anderson04' }
@database.
cite
q
c
q
self.find { |h| h['id'] == 'Lane12a' }
self.find(id: 'Lane12a').first
self.find(id: 'Lane12a')
self.find
self
